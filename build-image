#!/bin/bash -e

PROG=$(basename $0)
PROG_DIR=$(dirname $0)

function usage {
    cat <<EOF 1>&2
usage: $PROG [options...] SOURCEDIR_for_scripts
Options:
  -i IMAGE  Name of the docker image (including tag) to use as package build environment.
  -o DIR    Destination directory to store packages to.
EOF
    exit 1
}

function fatal {
    echo "$PROG: ${1:-"Unknown Error"}" 1>&2
    exit 1
}

function abspath {
    echo $(cd "$1" && pwd)
}


###########################################################################

[[ $# -eq 0 ]] && usage

while getopts "i:o:h" opt; do
    case $opt in
        i)
            image="$OPTARG"
            ;;
        o)
            outdir="$OPTARG"
            ;;
        h)
            usage
            ;;
        *)
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))
srcdir=$1
#docker_args="-it "
docker_args="-d "
#build_container_name="rpi4-image-build"
#docker_args="--name $build_container_name "

# Check that mandatory parameters are valid
[[ !    "$outdir"        ]] && fatal "output directory was not given (-o DIR)"
[[ ! -d "$outdir"        ]] && fatal "output directory does not exist: $outdir"
[[ !    "$srcdir"        ]] && fatal "source directory not given"
[[ !    "$image"         ]] && fatal "docker image name not given (-i IMAGE)"

# Needed for loopback to work inside container.
docker_args+="-v /dev:/dev --privileged "

# Check that optional parameters are valid
if [[ "$depdir" ]]; then
    [[ ! -d "$depdir" ]] && fatal "dependency directory given but does not exist: $depdir"
    docker_args+="-v $(abspath "$depdir"):/dependencies:ro "
fi

docker_args+="-v $(abspath "$srcdir"):/source-ro:ro -v $(abspath "$outdir"):/output -v $(cd $PROG_DIR; pwd)/build-rpi4.sh:/build-rpi4.sh:ro "

# Pass current UID and GID to container, so that it can change the
# ownership of output files which are otherwise writen to outdir as
# root
docker_args+="-e USER=$(id -u) -e GROUP=$(id -g) "

# Comment following out if you want to keep container after execution
# for debugging
docker_args+="--rm "

if [ ! -f $(abspath "$srcdir")/eoan-preinstalled-server-arm64+raspi3.img.xz ]; then
echo "Downloading daily-preinstalled eoan ubuntu-server raspi3 image."
wget http://cdimage.ubuntu.com/ubuntu-server/daily-preinstalled/current/eoan-preinstalled-server-arm64+raspi3.img.xz -O $(abspath "$srcdir")/eoan-preinstalled-server-arm64+raspi3.img.xz
fi
docker_args+="-v $(abspath "$srcdir")/eoan-preinstalled-server-arm64+raspi3.img.xz:/eoan-preinstalled-server-arm64+raspi3.img.xz "

# For ccache
#docker_args+="-e CCACHE_DIR=/ccache --volumes-from ccache -v ccache:/ccache "
docker_args+="-e CCACHE_DIR=/ccache -v ccache:/ccache "

# Export container id
cidfile="$(cd $PROG_DIR; pwd)/build.cid"
rm -f $cidfile
docker_args+="--cidfile=$cidfile "


cmd="docker run $docker_args $image /build-rpi4.sh"

# Create Docker ccache volume if it does not exist as per https://stackoverflow.com/revisions/39652117/2
docker volume create --name ccache

#Remove existing build container if it exists.
#docker rm -v $build_container_name

# docker create -v /mnt/ccache:/ccache --name ccache $image
echo "Running docker:"
echo "$cmd"
$cmd
read build_cid <$cidfile
echo $build_cid
echo "Tailing docker log:"
tail_log_cmd="docker exec -it $build_cid tail -F /tmp/build.log"
echo $tail_log_cmd
exec $tail_log_cmd
